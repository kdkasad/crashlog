name: CI
run-name: |
  ${{
    format(
      'CI pipeline for {0} by @{1}',
      github.event_name == 'pull_request' && format('#{0}', github.event.number) || github.ref_name,
      github.actor
    )
  }}

on:
  push: {}
  pull_request:
    branches:
      - master
      - "release/*"

env:
  RUST_BACKTRACE: short
  RUSTFLAGS: '-D warnings'

jobs:
  clippy:
    name: Lint code (Rust)
    runs-on: ubuntu-latest
    steps:
      - name: Check out sources
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Lint code
        run: cargo clippy --all-targets --workspace --locked

  fmt:
    name: Check formatting (Rust)
    runs-on: ubuntu-latest
    steps:
      - name: Check out sources
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Cache build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Check formatting
        run: cargo fmt --check --all

  test:
    name: Run tests
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: read
    env:
      RUSTFLAGS: ''
    steps:
      - name: Check out sources
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache toolchain and build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install nextest (if not cached)
        run: cargo nextest --version || cargo install --locked cargo-nextest

      - name: Install llvm-cov (if not cached)
        run: cargo llvm-cov --version || cargo install --locked cargo-llvm-cov

      - name: Run tests
        run: >-
          cargo llvm-cov nextest
          --no-report
          --no-fail-fast
          --locked
          --workspace
          --all-targets
          --all-features
          --profile ci

      - name: Generate coverage reports
        if: ${{ !cancelled() }} # Generate reports even if tests failed
        shell: bash
        run: |
          cargo llvm-cov report --html
          cargo llvm-cov report --codecov --output-path target/llvm-cov/codecov.json

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ !cancelled() }} # Upload reports even if tests failed
        with:
          check_run: false
          comment_mode: ${{ (github.event_name == 'pull_request') && 'always' || 'off' }}
          files: |
            target/nextest/ci/junit.xml

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }} # Upload reports even if tests failed
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: target/nextest/ci/junit.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: ${{ !cancelled() }} # Upload reports even if tests failed
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: target/llvm-cov/codecov.json
          fail_ci_if_error: true

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }} # Upload reports even if tests failed
        with:
          name: coverage-html
          path: target/llvm-cov/html/

  build:
    name: Build project
    runs-on: ubuntu-latest
    steps:
      - name: Check out sources
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Compile project
        run: cargo build --workspace --all-targets --all-features --release --locked

  docs:
    name: Generate API documentation
    runs-on: ubuntu-latest
    steps:
      - name: Check out sources
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Build docs
        run: cargo doc --no-deps --document-private-items --workspace --all-features --locked
